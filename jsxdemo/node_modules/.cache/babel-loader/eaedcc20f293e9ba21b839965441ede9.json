{"ast":null,"code":"var _jsxFileName = \"C:\\\\Practise\\\\React\\\\jsxdemo\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loading from \"./\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      month: null,\n      errorMessage: \"\"\n    };\n\n    this.componentDidMount = () => {\n      window.navigator.geolocation.getCurrentPosition(position => this.setState({\n        lat: position.coords.latitude\n      }), err => this.setState({\n        errorMessage: err.message\n      }));\n    };\n  }\n\n  render() {\n    const getDiv = () => {\n      if (this.state.errorMessage && !this.state.lat) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 16\n          }\n        }, \"Error Message : \", this.state.errorMessage);\n      }\n\n      if (this.state.lat && !this.state.errorMessage) {\n        return /*#__PURE__*/React.createElement(SeasonDisplay, {\n          lat: this.state.lat,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 16\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 14\n        }\n      });\n    };\n\n    return getDiv();\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 17\n  }\n}), document.querySelector(\"#root\"));","map":{"version":3,"sources":["C:/Practise/React/jsxdemo/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Loading","App","Component","state","lat","month","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","render","getDiv","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,IAApB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,KAAK,EAAE,IAApB;AAA0BC,MAAAA,YAAY,EAAE;AAAxC,KADwB;;AAAA,SAGhCC,iBAHgC,GAGZ,MAAM;AACxBC,MAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACGC,QAAD,IAAc,KAAKC,QAAL,CAAc;AAAET,QAAAA,GAAG,EAAEQ,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAd,CADhB,EAEGC,GAAD,IAAS,KAAKH,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAEU,GAAG,CAACC;AAApB,OAAd,CAFX;AAID,KAR+B;AAAA;;AAUhCC,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAG,MAAM;AACnB,UAAI,KAAKhB,KAAL,CAAWG,YAAX,IAA2B,CAAC,KAAKH,KAAL,CAAWC,GAA3C,EAAgD;AAC9C,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB,KAAKD,KAAL,CAAWG,YAAjC,CAAP;AACD;;AAED,UAAI,KAAKH,KAAL,CAAWC,GAAX,IAAkB,CAAC,KAAKD,KAAL,CAAWG,YAAlC,EAAgD;AAC9C,4BAAO,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAE,KAAKH,KAAL,CAAWC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,0BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KATD;;AAUA,WAAOe,MAAM,EAAb;AACD;;AAtB+B;;AAyBlCrB,QAAQ,CAACoB,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBE,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Loading from \"./\"\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, month: null, errorMessage: \"\" };\r\n\r\n  componentDidMount = () => {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ lat: position.coords.latitude }),\r\n      (err) => this.setState({ errorMessage: err.message })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const getDiv = () => {\r\n      if (this.state.errorMessage && !this.state.lat) {\r\n        return <div>Error Message : {this.state.errorMessage}</div>;\r\n      }\r\n\r\n      if (this.state.lat && !this.state.errorMessage) {\r\n        return <SeasonDisplay lat={this.state.lat} />;\r\n      }\r\n      return <Loading />;\r\n    };\r\n    return getDiv();\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"]},"metadata":{},"sourceType":"module"}